#!/bin/bash

# This script starts an AWS instance and shoves all 'net traffic through it.
# A sort of "poor mans'" VPN.
#
# Usage: periscope <options>
#
# where <options> is zero or more of:
#     -h    prints help text and stops
#     -v    be verbose
#
# Needs 'sshuttle' installed. Get it from [https://github.com/apenwarr/sshuttle].
# Note that you need to enter the root password to make changes on your machine.
#
# Needs 'swarm', of course: [https://github.com/rzzzwilson/swarm_aws].

# instance name we are going to use
VPN_NAME="periscope"

# wait time for "after IP" thread
WAIT_TIME=30

# help a befuddled user
function usage
{
    if [ ! -z "$*" ]; then
        echo "******************************************************"
        echo "$*"
        echo "******************************************************"
    fi

    echo "Usage: periscope <options>"
    echo ""
    echo "where <options> is zero or more of:"
    echo "    -h    prints help text and stops"
    echo "    -v    be verbose"
}

# function called when user does CONTROL-C
function ctrl_c()
{
    echo -n "periscope is shutting down ... "
    # kill periscope server
    swarm stop -p "$VPN_NAME" -q -y
    echo "done"
}

# function used in thread to wait for sshuttle to start
function wait_sshuttle()
{
    while true; do
        sleep 1
        if ps -ef | grep sshuttle >/dev/null; then
            sleep 1
            echo "Before, IP=$BEFORE_IP"
            AFTER_IP=$BEFORE_IP
            while [ "$BEFORE_IP" == "$AFTER_IP" ]; do
                AFTER_IP=$(wget -qO- http://ipecho.net/plain)
                if [ -z "$AFTER_IP" ]; then
                    AFTER_IP=$BEFORE_IP
                fi
                sleep 1
            done
            echo " After, IP=$AFTER_IP"
            echo ""
            echo "periscope running, do ^C in this window to terminate"
            return
        fi
    done
}

# handle user doing ^C
trap ctrl_c INT

# handle optiopns
Q_OPT="-q"
while getopts :hv OPT; do
    case $OPT in
        h)  # show help text
            usage
            exit 0
            ;;
        v)  # be verbose
            Q_OPT=""
            ;;
        \?) # unrecognized option - show help text
            usage "Option '-$OPTARG' not allowed."
            exit 1
            ;;
    esac
done

# kill off any existing instance(s)
swarm stop -p "$VPN_NAME" $Q_OPT -y
swarm wait -p "$VPN_NAME" $Q_OPT terminated

# show user our 'unprotected' IP
BEFORE_IP=$(wget -qO- http://ipecho.net/plain)
#echo "Before, IP=$BEFORE_IP"

# start a t.micro instance, wait until it can accept SSH connections
swarm start -c instance_config -p "$VPN_NAME" $Q_OPT 1
swarm wait -p "$VPN_NAME" $Q_OPT ssh

# get instance hostname
HOST_NAME=$(swarm cmd -p "$VPN_NAME" -i -q "wget -q -O - http://169.254.169.254/latest/meta-data/public-hostname")
HOST_NAME=$(echo "$HOST_NAME" | sed -e "s/^.*|//")

# since sshuttle blocks, we need to start a thread to get AFTER IP
(wait_sshuttle)&

# now start the local part of the connection - we hang here until ^C
sshuttle -r ec2-user@$HOST_NAME --dns 0.0.0.0/0 >/dev/null 2>&1
